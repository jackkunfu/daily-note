'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var parseLib = function () {
  var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(library) {
    var result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, lib;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            result = {};
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context3.prev = 4;
            _iterator = Object.keys(library)[Symbol.iterator]();

          case 6:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context3.next = 17;
              break;
            }

            key = _step.value;
            _context3.next = 10;
            return library[key];

          case 10:
            lib = _context3.sent;
            _context3.next = 13;
            return invokeFieldOrMethod({
              ctx: library,
              attr: lib
            });

          case 13:
            result[key] = _context3.sent;

          case 14:
            _iteratorNormalCompletion = true;
            _context3.next = 6;
            break;

          case 17:
            _context3.next = 23;
            break;

          case 19:
            _context3.prev = 19;
            _context3.t0 = _context3['catch'](4);
            _didIteratorError = true;
            _iteratorError = _context3.t0;

          case 23:
            _context3.prev = 23;
            _context3.prev = 24;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 26:
            _context3.prev = 26;

            if (!_didIteratorError) {
              _context3.next = 29;
              break;
            }

            throw _iteratorError;

          case 29:
            return _context3.finish(26);

          case 30:
            return _context3.finish(23);

          case 31:
            return _context3.abrupt('return', result);

          case 32:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[4, 19, 23, 31], [24,, 26, 30]]);
  }));

  return function parseLib(_x2) {
    return _ref4.apply(this, arguments);
  };
}();

var invokeFieldOrMethod = function () {
  var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(_ref5) {
    var ctx = _ref5.ctx,
        attr = _ref5.attr,
        args = _ref5.args;
    var result;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!is.function(attr)) {
              _context4.next = 11;
              break;
            }

            _context4.next = 3;
            return attr.apply(ctx, args);

          case 3:
            result = _context4.sent;

            if (!is.generator(result)) {
              _context4.next = 8;
              break;
            }

            _context4.next = 7;
            return co.wrap(attr).apply(ctx, args);

          case 7:
            return _context4.abrupt('return', _context4.sent);

          case 8:
            return _context4.abrupt('return', result);

          case 11:
            if (!is.generator(attr)) {
              _context4.next = 15;
              break;
            }

            _context4.next = 14;
            return co.wrap(attr).apply(ctx, args);

          case 14:
            return _context4.abrupt('return', _context4.sent);

          case 15:
            return _context4.abrupt('return', attr);

          case 16:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function invokeFieldOrMethod(_x3) {
    return _ref6.apply(this, arguments);
  };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var co = require('co');

var _require = require('lodash'),
    merge = _require.merge;

var _require2 = require('events'),
    EventEmitter = _require2.EventEmitter;

var is = require('is-type-of');
var CircularJSON = require('circular-json');
var log = require('./util').log('library_handler:');

var Handler = function (_EventEmitter) {
  _inherits(Handler, _EventEmitter);

  function Handler() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$logger = _ref.logger,
        logger = _ref$logger === undefined ? log : _ref$logger,
        lib = _ref.lib;

    _classCallCheck(this, Handler);

    var _this = _possibleConstructorReturn(this, (Handler.__proto__ || Object.getPrototypeOf(Handler)).call(this));

    _this.lib = lib;
    _this.parsedLib = null;
    _this.logger = logger;
    return _this;
  }

  _createClass(Handler, [{
    key: 'init',
    value: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var lib;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                lib = this.lib;
                _context.next = 3;
                return parseLib(lib);

              case 3:
                this.parsedLib = _context.sent;

                this.libSignature = getLibSignature(this.parsedLib);

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref2.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: 'getAgents',
    value: function getAgents(mail) {
      mail.reply(this.libSignature);
    }
  }, {
    key: 'invokeLibrary',
    value: function invokeLibrary(mail, invokeParams) {
      if (!invokeParams) {
        return;
      }
      var parsedLib = this.parsedLib,
          logger = this.logger;
      var objName = invokeParams.objName,
          methodName = invokeParams.methodName,
          args = invokeParams.args,
          isEvent = invokeParams.isEvent;

      var attr = parsedLib[objName][methodName];
      var that = this;

      (function () {
        var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var eventName, to, result;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!isEvent) {
                    _context2.next = 7;
                    break;
                  }

                  eventName = invokeParams.eventName;
                  to = mail.from;

                  args[args.length - 1] = function fn() {
                    for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
                      rest[_key] = arguments[_key];
                    }

                    that.emit('lib-event', { eventName, to, args: Array.from(rest) });
                  };
                  attr.apply(parsedLib[objName], args);
                  _context2.next = 11;
                  break;

                case 7:
                  _context2.next = 9;
                  return invokeFieldOrMethod({
                    ctx: parsedLib[objName],
                    attr,
                    args
                  });

                case 9:
                  result = _context2.sent;


                  // 有的方法会返回this JSON.stringify会循环引用
                  if (is.object(result)) {
                    mail.reply(JSON.parse(CircularJSON.stringify(result)));
                  } else {
                    mail.reply(result);
                  }

                case 11:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function invoke() {
          return _ref3.apply(this, arguments);
        }

        return invoke;
      })()().catch(logger.error);
    }
  }]);

  return Handler;
}(EventEmitter);

module.exports = Handler;

function getLibSignature(lib) {
  var result = {};
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = Object.keys(lib)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var key = _step2.value;

      result[key] = getMethodByProto(lib[key]);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
}

function getMethodByProto(obj) {
  var prototypeKeys = Object.getOwnPropertyNames(obj);

  var result = prototypeKeys.filter(function (key) {
    return !key.startsWith('_');
  }).reduce(function (cur, pre) {
    cur[pre] = { key: pre };
    return cur;
  }, {});

  var prototypeObj = Object.getPrototypeOf(obj);

  if (!prototypeObj) {
    return {};
  }
  return merge(result, getMethodByProto(prototypeObj));
}