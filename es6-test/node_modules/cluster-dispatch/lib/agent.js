'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');
var uuid = require('uuid');
var is = require('is-type-of');

var LibEvent = function (_EventEmitter) {
  _inherits(LibEvent, _EventEmitter);

  function LibEvent() {
    _classCallCheck(this, LibEvent);

    return _possibleConstructorReturn(this, (LibEvent.__proto__ || Object.getPrototypeOf(LibEvent)).apply(this, arguments));
  }

  return LibEvent;
}(EventEmitter);

var Agent = function () {
  function Agent() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        logger = _ref.logger,
        mailBox = _ref.mailBox;

    _classCallCheck(this, Agent);

    this._logger = logger;
    this._mailBox = mailBox;
    this._eventMap = new Map();
  }

  _createClass(Agent, [{
    key: 'init',
    value: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var _this2 = this;

        var reply, agentObjs, keys, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, obj, methodKeys, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, method;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._mailBox.on('mail', function (mail) {
                  return _this2.mailHandler(mail);
                });

                _context.next = 3;
                return this._mailBox.write().setTo('LIBRARY').setMessage({ action: 'getAgents' }).send();

              case 3:
                reply = _context.sent;
                agentObjs = reply.message;
                keys = Object.keys(agentObjs);
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 9;
                _iterator = keys[Symbol.iterator]();

              case 11:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context.next = 38;
                  break;
                }

                key = _step.value;
                obj = agentObjs[key];
                methodKeys = Object.keys(obj);
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context.prev = 18;

                for (_iterator2 = methodKeys[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  method = _step2.value;

                  obj[method] = this.invoke.bind(this, { objName: key, methodName: method });
                }

                _context.next = 26;
                break;

              case 22:
                _context.prev = 22;
                _context.t0 = _context['catch'](18);
                _didIteratorError2 = true;
                _iteratorError2 = _context.t0;

              case 26:
                _context.prev = 26;
                _context.prev = 27;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 29:
                _context.prev = 29;

                if (!_didIteratorError2) {
                  _context.next = 32;
                  break;
                }

                throw _iteratorError2;

              case 32:
                return _context.finish(29);

              case 33:
                return _context.finish(26);

              case 34:
                this[key] = obj;

              case 35:
                _iteratorNormalCompletion = true;
                _context.next = 11;
                break;

              case 38:
                _context.next = 44;
                break;

              case 40:
                _context.prev = 40;
                _context.t1 = _context['catch'](9);
                _didIteratorError = true;
                _iteratorError = _context.t1;

              case 44:
                _context.prev = 44;
                _context.prev = 45;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 47:
                _context.prev = 47;

                if (!_didIteratorError) {
                  _context.next = 50;
                  break;
                }

                throw _iteratorError;

              case 50:
                return _context.finish(47);

              case 51:
                return _context.finish(44);

              case 52:

                this.agentObjs = agentObjs;

              case 53:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[9, 40, 44, 52], [18, 22, 26, 34], [27,, 29, 33], [45,, 47, 51]]);
      }));

      function init() {
        return _ref2.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: 'invoke',
    value: function invoke(_ref3) {
      var _this3 = this;

      var objName = _ref3.objName,
          methodName = _ref3.methodName;
      var _mailBox = this._mailBox,
          _eventMap = this._eventMap;

      for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }

      var args = Array.from(rest);

      var mail = _mailBox.write().setTo('LIBRARY');
      var message = {
        action: 'invokeLibrary',
        data: { objName, methodName, args }
      };

      // 这里判断最后一个参数是不是function,
      // 如果是function就默认为监听了一个事件
      if (args.length > 0 && is.function(args[args.length - 1])) {
        var eventName = uuid();
        var callback = args[args.length - 1];
        var libEvent = new LibEvent();

        libEvent.on(eventName, callback);
        _eventMap.set(eventName, libEvent);

        message.data.eventName = eventName;
        message.data.isEvent = true;

        return mail.setMessage(message).send({ duplex: false });
      }

      return _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        var reply;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return mail.setMessage(message).send();

              case 2:
                reply = _context2.sent;
                return _context2.abrupt('return', reply.message);

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, _this3);
      }))();
    }
  }, {
    key: 'mailHandler',
    value: function mailHandler(mail) {
      var _logger = this._logger;
      var message = mail.message;
      var action = message.action;


      switch (action) {
        case 'lib-event':
          {
            var eventName = message.eventName,
                args = message.args;

            var eventLib = this._eventMap.get(eventName);

            eventLib.emit.apply(eventLib, _toConsumableArray([eventName].concat(args)));
            break;
          }

        default:
          _logger.info('default');
      }
    }
  }]);

  return Agent;
}();

var _agent = null;
module.exports = {
  RawAgent: Agent,

  setAgent(agent) {
    _agent = agent;
  },

  getAgent() {
    return _agent;
  }
};