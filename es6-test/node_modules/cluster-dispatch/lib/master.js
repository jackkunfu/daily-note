'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var co = require('co');
var os = require('os');
var path = require('path');

var Messenger = require('socket-messenger').Messenger;
var SDKBase = require('sdk-base');

var AppWorker = require('./app_worker');
var LibraryWorker = require('./library_worker');
var util = require('./util');

var Master = function (_SDKBase) {
  _inherits(Master, _SDKBase);

  /**
   * Master进程, app和library分别为他的子进程
   *
   * @param {Object} options
   *   - {String} baseDir - 工程根路径
   *   - {String} appPath - app进程入口文件, 可以是一个相对路径
   *   - {String} libraryPath - 需要代理的库的入口文件, 可以是一个相对路径
   *   - {Number} appWorkerCount - 需要启动的app进程数
   *   - {Funcion} logging - log, v3版本移除
   *   - {Object} logger - console like
   *   - {Boolean} needLibrary - 是否需要启动library进程
   *   - {Boolean} needAgent - 是否需要自动启动代理
   * @constructor
   */
  function Master() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$baseDir = _ref.baseDir,
        baseDir = _ref$baseDir === undefined ? process.cwd() : _ref$baseDir,
        _ref$appPath = _ref.appPath,
        appPath = _ref$appPath === undefined ? 'index.js' : _ref$appPath,
        _ref$libraryPath = _ref.libraryPath,
        libraryPath = _ref$libraryPath === undefined ? 'agent/lib/index.js' : _ref$libraryPath,
        _ref$appWorkerCount = _ref.appWorkerCount,
        appWorkerCount = _ref$appWorkerCount === undefined ? os.cpus().length : _ref$appWorkerCount,
        logging = _ref.logging,
        logger = _ref.logger,
        _ref$needLibrary = _ref.needLibrary,
        needLibrary = _ref$needLibrary === undefined ? true : _ref$needLibrary,
        _ref$needAgent = _ref.needAgent,
        needAgent = _ref$needAgent === undefined ? true : _ref$needAgent;

    _classCallCheck(this, Master);

    var _this = _possibleConstructorReturn(this, (Master.__proto__ || Object.getPrototypeOf(Master)).call(this));

    if (!needLibrary && needAgent) {
      throw new Error('needLibrary为false时 needAgent不允许设为true');
    }

    _this.baseDir = baseDir;
    _this.appPath = path.join(baseDir, appPath);
    _this.libraryPath = path.join(baseDir, libraryPath);
    _this.appWorkerCount = appWorkerCount;
    _this.logging = util.log('master:', logging);
    _this.logger = logger === undefined ? _this.logging : logger;
    _this.needLibrary = needLibrary;
    _this.needAgent = needLibrary;

    if (process.platform === 'win32') {
      _this.sockPath = `\\\\.\\pipe\\pipe-midway-${process.pid}`;
    } else {
      _this.sockPath = path.join(os.tmpdir(), 'midway.sock');
    }

    _this.appCluster = null;
    _this.library = null;
    _this.messenger = new Messenger({ sockPath: _this.sockPath });
    return _this;
  }

  _createClass(Master, [{
    key: 'init',
    value: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var _this2 = this;

        var needLibrary, messenger;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                needLibrary = this.needLibrary, messenger = this.messenger;
                _context.next = 3;
                return co.wrap(messenger.init).apply(messenger);

              case 3:
                messenger.on('error', function (error) {
                  return _this2.emit('error', error);
                });

                // 应对不需要启动library进程的情况

                if (!needLibrary) {
                  _context.next = 8;
                  break;
                }

                this.library = this.startLibrary();
                _context.next = 8;
                return ready(this.library);

              case 8:

                this.appCluster = this.startApp();
                _context.next = 11;
                return ready(this.appCluster);

              case 11:

                this.ready(true);

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref2.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: 'startApp',
    value: function startApp() {
      var _this3 = this;

      var appCluster = new AppWorker({
        baseDir: this.baseDir,
        appPath: this.appPath,
        appWorkerCount: this.appWorkerCount,
        logger: this.logger,
        sockPath: this.sockPath,
        needLibrary: this.needLibrary,
        needAgent: this.needAgent
      });
      appCluster.init();
      appCluster.on('error', function (error) {
        return _this3.emit('error', error);
      });

      this.logger.info('start app');
      return appCluster;
    }
  }, {
    key: 'startLibrary',
    value: function startLibrary() {
      var _this4 = this;

      var libraryPath = this.libraryPath,
          logger = this.logger,
          sockPath = this.sockPath;


      var library = new LibraryWorker({ libraryPath, logger, sockPath });
      library.init();
      library.on('error', function (error) {
        return _this4.emit('error', error);
      });

      return library;
    }
  }]);

  return Master;
}(SDKBase);

module.exports = Master;

function ready(obj) {
  return new Promise(function (resolve, reject) {
    var timeoutFlag = setTimeout(function () {
      reject(`${obj.constructor.name} ready fail`);
    }, 10000);
    obj.ready(function () {
      clearTimeout(timeoutFlag);
      resolve();
    });
  });
}