'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var path = require('path');
var cp = require('child_process');
var assert = require('assert');

var SDKBase = require('sdk-base');

var _require = require('lodash'),
    merge = _require.merge;

var ROLE = require('./constant/role');
var util = require('./util');

var LibraryWorker = function (_SDKBase) {
  _inherits(LibraryWorker, _SDKBase);

  function LibraryWorker() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        libraryPath = _ref.libraryPath,
        logger = _ref.logger,
        sockPath = _ref.sockPath;

    _classCallCheck(this, LibraryWorker);

    var _this = _possibleConstructorReturn(this, (LibraryWorker.__proto__ || Object.getPrototypeOf(LibraryWorker)).call(this));

    _this.libraryPath = libraryPath;
    _this.logger = logger;
    _this.sockPath = sockPath;

    assert(util.exists(_this.libraryPath), `libraryPath ${_this.libraryPath} 不存在或不是一个文件`);

    _this.worker = null;
    return _this;
  }

  _createClass(LibraryWorker, [{
    key: 'init',
    value: function init() {
      this.fork();
    }
  }, {
    key: 'fork',
    value: function fork() {
      var _this2 = this;

      var libraryPath = this.libraryPath,
          logger = this.logger,
          sockPath = this.sockPath;


      var env = merge(process.env, {
        ROLE: ROLE.LIBRARY,
        LIBRARY_PATH: libraryPath,
        SOCK_PATH: sockPath
      });
      var worker = cp.fork(path.join(__dirname, './client/fork_library.js'), { env });

      worker.on('message', function (message) {
        if (message && message.ready) {
          _this2.ready(true);
        }
      });

      logger.info(`library worker fork pid = ${worker.pid}`);

      worker.on('error', logger.error);
      worker.once('exit', function (code, signal) {
        logger.error(`library worker exit code = ${code}, signal = ${signal}`);

        worker.removeAllListeners();
        if (process.env.NODE_ENV === 'production') {
          _this2.fork();
        }
      });

      this.worker = worker;
    }
  }]);

  return LibraryWorker;
}(SDKBase);

module.exports = LibraryWorker;