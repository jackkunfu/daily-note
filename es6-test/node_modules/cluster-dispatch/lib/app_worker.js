'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cluster = require('cluster');
var assert = require('assert');
var path = require('path');
var SDKBase = require('sdk-base');

var ROLE = require('./constant/role');
var util = require('./util');

var AppWorker = function (_SDKBase) {
  _inherits(AppWorker, _SDKBase);

  function AppWorker() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        appWorkerCount = _ref.appWorkerCount,
        appPath = _ref.appPath,
        logger = _ref.logger,
        sockPath = _ref.sockPath,
        needAgent = _ref.needAgent;

    _classCallCheck(this, AppWorker);

    var _this = _possibleConstructorReturn(this, (AppWorker.__proto__ || Object.getPrototypeOf(AppWorker)).call(this));

    _this.appPath = appPath;
    _this.workerFile = path.join(__dirname, './client/fork_app.js');
    _this.workerCount = appWorkerCount;
    _this.logger = logger;
    _this.sockPath = sockPath;
    _this.needAgent = needAgent;

    // 统计所有的worker是否都已经ready
    _this._readyCount = 0;

    assert(util.exists(_this.workerFile), `app worker 目录 ${_this.workerFile} 不存在或不是一个文件`);

    _this.workerMap = new Map();
    return _this;
  }

  _createClass(AppWorker, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      var workerFile = this.workerFile,
          appPath = this.appPath,
          workerCount = this.workerCount,
          logger = this.logger,
          sockPath = this.sockPath,
          needAgent = this.needAgent;

      if (!cluster.isMaster) {
        return;
      }

      cluster.settings = { exec: workerFile };
      Array.from({ length: workerCount }).forEach(function () {
        cluster.fork({
          ROLE: ROLE.APP,
          SOCK_PATH: sockPath,
          NEED_AGENT: needAgent,
          APP_PATH: appPath
        });
      });

      cluster.on('fork', function (worker) {
        _this2.workerMap.set(worker.process.pid, worker);

        worker.on('message', function (message) {
          return _this2._onReady(message);
        });

        logger.info(`app worker fork pid = ${worker.process.pid}`);
      });

      cluster.on('disconnect', function (worker) {
        logger.info(`app worker disconnect pid = ${worker.process.pid}`);
      });

      cluster.on('error', logger.error);

      cluster.on('exit', function (worker, code, signal) {
        logger.error(`app worker exit pid = ${worker.process.pid}, code = ${code}, signal = ${signal}`);

        _this2.workerMap.delete(worker.process.pid);
        worker.removeAllListeners();
        _this2._readyCount -= 1;

        if (process.env.NODE_ENV === 'production') {
          cluster.fork({
            ROLE: ROLE.APP,
            SOCK_PATH: sockPath,
            NEED_AGENT: needAgent,
            APP_PATH: appPath
          });
        }
      });
    }
  }, {
    key: '_onReady',
    value: function _onReady(message) {
      if (message && message.ready) {
        this._readyCount += 1;

        if (this._readyCount === this.workerCount) {
          this.ready(true);
        }
      }
    }
  }]);

  return AppWorker;
}(SDKBase);

module.exports = AppWorker;