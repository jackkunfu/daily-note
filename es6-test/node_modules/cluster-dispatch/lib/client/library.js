'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MailBox = require('socket-messenger').MailBox;
var Base = require('sdk-base');

var Handler = require('../library_handler');

var ENV_ROLE = process.env.ROLE;
var SOCK_PATH = process.env.SOCK_PATH;
var name = `${ENV_ROLE}`;

var Library = function (_Base) {
  _inherits(Library, _Base);

  function Library() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        logger = _ref.logger,
        lib = _ref.lib;

    _classCallCheck(this, Library);

    var _this = _possibleConstructorReturn(this, (Library.__proto__ || Object.getPrototypeOf(Library)).call(this));

    _this.lib = lib;
    _this.logger = logger;
    _this.mailBox = new MailBox({ name, sockPath: SOCK_PATH });
    _this.handler = new Handler({ lib, logger });
    return _this;
  }

  _createClass(Library, [{
    key: 'init',
    value: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var _this2 = this;

        var mailBox, handler;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                mailBox = this.mailBox, handler = this.handler;
                _context.next = 3;
                return mailBox.init();

              case 3:
                process.send({ ready: true });

                _context.next = 6;
                return handler.init();

              case 6:

                handler.on('lib-event', function (params) {
                  return _this2._onLibEventHandler(params);
                });

                mailBox.on('mail', function (mail) {
                  return _this2._onMailHandler(mail);
                });

                this.ready(true);

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref2.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: '_onLibEventHandler',
    value: function _onLibEventHandler(params) {
      var mailBox = this.mailBox;

      var eventName = params.eventName;
      var to = params.to;
      var args = params.args;

      mailBox.write().setTo(to).setMessage({
        action: 'lib-event',
        eventName,
        args
      }).send({ duplex: false });
    }
  }, {
    key: '_onMailHandler',
    value: function _onMailHandler(mail) {
      var handler = this.handler;

      var message = mail.message;
      var action = message.action;
      var data = message.data;

      switch (action) {
        case 'invokeLibrary':
          handler.invokeLibrary(mail, data);
          break;

        case 'getAgents':
          handler.getAgents(mail);
          break;

        /* istanbul ignore next */
        default:
          mail.reply('');
      }
    }
  }]);

  return Library;
}(Base);

module.exports = Library;