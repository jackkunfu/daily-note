'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var LibraryClient = require('./library');
var log = require('../util').log('cluster:library_worker');

var libPath = process.env.LIBRARY_PATH;
var lib = require(libPath);

(function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var libraryClient;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            libraryClient = new LibraryClient({ logger: log, lib });
            _context.next = 3;
            return libraryClient.init();

          case 3:

            libraryClient.on('error', log.error);

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function forkLibrary() {
    return _ref.apply(this, arguments);
  }

  return forkLibrary;
})()().catch(log.error);