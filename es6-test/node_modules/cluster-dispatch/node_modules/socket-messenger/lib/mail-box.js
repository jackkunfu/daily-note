'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var assert = require('assert');
var os = require('os');
var path = require('path');
var EventEmitter = require('events');
var is = require('is-type-of');
var debug = require('debug')('socket-msessenger:mail-box');

var _require = require('./constant'),
    TIMEOUT_TIME = _require.TIMEOUT_TIME;

var _require2 = require('./util'),
    generateMailNo = _require2.generateMailNo;

var Client = require('./socket/client');
var Mail = require('./mail');

var MailBox = function (_EventEmitter) {
  _inherits(MailBox, _EventEmitter);

  function MailBox() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        name = _ref.name,
        _ref$sockPath = _ref.sockPath,
        sockPath = _ref$sockPath === undefined ? path.join(os.tmpdir(), 'midway.sock') : _ref$sockPath;

    _classCallCheck(this, MailBox);

    var _this = _possibleConstructorReturn(this, (MailBox.__proto__ || Object.getPrototypeOf(MailBox)).call(this));

    assert(is.string(name) && name.length > 0, 'options.name required');
    assert(name.indexOf('#') === -1, 'options.name not include #');

    _this.name = name;
    _this.autoIncrement = 0;
    _this.box = new Map();

    _this.client = new Client({ sockPath, name });
    return _this;
  }

  _createClass(MailBox, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var timeoutFlag = setTimeout(reject, 1000 * 20);
        _this2.client.ready(function () {
          clearTimeout(timeoutFlag);
          _this2.client.on('mail', function (mail) {
            return _this2.onMailHandler(mail);
          });
          return resolve();
        });
      });
    }
  }, {
    key: 'write',
    value: function write() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$timeout = _ref2.timeout,
          timeout = _ref2$timeout === undefined ? TIMEOUT_TIME : _ref2$timeout;

      if (!this.client.hasReady) {
        throw new Error('perform the init method');
      }

      var from = this.name,
          client = this.client;


      this.autoIncrement = this.autoIncrement + 1;
      var id = generateMailNo(from, this.autoIncrement);

      var mail = new Mail({ from, id, client, timeout });
      this.box.set(id, mail);

      return mail;
    }
  }, {
    key: 'onMailHandler',
    value: function onMailHandler() {
      var mail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var isReply = mail.isReply,
          id = mail.id;


      var wrapMail = Mail.wrapMail(mail, this.client);
      if (isReply) {
        var nativeMail = this.box.get(id);

        if (nativeMail) {
          nativeMail.emit(`reply#${ id }`, wrapMail);
          this.box.delete(id);
        }
      } else {
        this.emit('mail', wrapMail);
      }
    }
  }, {
    key: 'close',
    value: function close() {
      this.client.close();
    }
  }]);

  return MailBox;
}(EventEmitter);

module.exports = MailBox;