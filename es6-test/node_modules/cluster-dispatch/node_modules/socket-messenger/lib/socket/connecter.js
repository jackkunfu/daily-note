'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = require('debug')('socket-msessenger:connecter');
var EventEmitter = require('events');

var _require = require('../constant'),
    ACTION = _require.ACTION;

var _require2 = require('../util'),
    encode = _require2.encode,
    decode = _require2.decode;

var DataEvent = require('./data_event');

var Connecter = function (_EventEmitter) {
  _inherits(Connecter, _EventEmitter);

  function Connecter(socket) {
    _classCallCheck(this, Connecter);

    var _this = _possibleConstructorReturn(this, (Connecter.__proto__ || Object.getPrototypeOf(Connecter)).call(this));

    _this.socket = socket;
    _this.hasReady = false;
    return _this;
  }

  _createClass(Connecter, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      this.dataEvent = new DataEvent(this.socket);

      this.dataEvent.on('dataComplete', function (data) {
        return _this2.emit('data', data);
      });
    }
  }, {
    key: 'replyRegister',
    value: function replyRegister() {
      return this.socket.write(encode({ ready: true }));
    }
  }, {
    key: 'send',
    value: function send(mail) {
      var data = { action: ACTION.SEND_MAIL, mail };
      this.socket.write(encode(data));
    }
  }, {
    key: 'close',
    value: function close() {
      this.socket.removeAllListeners();
      this.dataEvent.removeAllListeners();
    }
  }]);

  return Connecter;
}(EventEmitter);

module.exports = Connecter;