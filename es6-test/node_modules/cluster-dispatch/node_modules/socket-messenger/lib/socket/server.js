'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var net = require('net');
var fs = require('fs');
var SDKBase = require('sdk-base');
var is = require('is-type-of');
var debug = require('debug')('socket-msessenger:server');

var Connecter = require('./connecter');

var _require = require('../constant'),
    ACTION = _require.ACTION;

var Server = function (_SDKBase) {
  _inherits(Server, _SDKBase);

  function Server() {
    _classCallCheck(this, Server);

    var _this = _possibleConstructorReturn(this, (Server.__proto__ || Object.getPrototypeOf(Server)).call(this));

    _this.connecterMap = new Map();

    _this.server = net.createServer(function (socket) {
      return _this.init(socket);
    });
    return _this;
  }

  _createClass(Server, [{
    key: 'init',
    value: function init(socket) {
      var _this2 = this;

      if (process.platform !== 'win32') {
        fs.chmodSync(this.sockPath, '775');
      }

      var connecter = new Connecter(socket);
      connecter.init();

      connecter.once('data', function (_ref) {
        var action = _ref.action,
            payload = _ref.payload;
        var name = payload.name;


        if (action !== ACTION.REGISTER || !is.string(name)) {
          connecter.close();
          return;
        }

        connecter.hasReady = true;
        connecter.replyRegister();
        connecter.on('data', function (data) {
          return _this2.dataHandler(data);
        });
        connecter.on('error', function (error) {
          return _this2.emit('error', error);
        });

        _this2.connecterMap.set(name, connecter);
      });
    }
  }, {
    key: 'dataHandler',
    value: function dataHandler(_ref2) {
      var action = _ref2.action,
          payload = _ref2.payload;

      if (action === ACTION.SEND_MAIL) {
        var mail = payload.mail;
        // TODO: 发送邮件

        this.emit('mail', mail);
      }
    }
  }, {
    key: 'getConnecterMap',
    value: function getConnecterMap() {
      return this.connecterMap;
    }
  }, {
    key: 'send',
    value: function send(mail) {
      var _this3 = this;

      var to = mail.to;

      var reg = new RegExp(to);

      var matchList = Array.from(this.connecterMap.keys()).filter(function (name) {
        return reg.test(name);
      });

      if (!is.array(matchList) || matchList.length <= 0) {
        // const hasReady = Array.from(this.connecterMap.values())
        //     .findIndex(connecter => connecter.hasReady === false);
        //
        // if (hasReady !== -1) {
        //   setImmediate(this.send.bind(this), mail);
        // }
        return;
      }
      matchList.forEach(function (name) {
        var connecter = _this3.connecterMap.get(name);
        connecter.send(mail);
      });

      return;
    }
  }, {
    key: 'listen',
    value: function listen(sockPath) {
      var _this4 = this;

      if (fs.existsSync(sockPath)) {
        fs.unlinkSync(sockPath);
      }
      this.sockPath = sockPath;
      return new Promise(function (resolve) {
        return _this4.server.listen(sockPath, resolve);
      });
    }
  }, {
    key: 'close',
    value: function close() {
      this.server.close();
    }
  }]);

  return Server;
}(SDKBase);

module.exports = Server;