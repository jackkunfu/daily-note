'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');
var debug = require('debug')('socket-msessenger:data_event');
var ExBuffer = require('ExBuffer');

var INNER_TEMP_DATA = Symbol('INNER_TEMP_DATA');

var DataEvent = function (_EventEmitter) {
  _inherits(DataEvent, _EventEmitter);

  function DataEvent(socket) {
    _classCallCheck(this, DataEvent);

    var _this = _possibleConstructorReturn(this, (DataEvent.__proto__ || Object.getPrototypeOf(DataEvent)).call(this));

    _this.socket = socket;

    _this[INNER_TEMP_DATA] = null;

    _this.exBuffer = new ExBuffer().uint32Head().bigEndian();
    _this.socket.on('data', function (data) {
      return _this.dataHandler(data);
    });
    _this.exBuffer.on('data', function (completeData) {
      return _this.emit('dataComplete', JSON.parse(completeData));
    });
    return _this;
  }

  _createClass(DataEvent, [{
    key: 'dataHandler',
    value: function dataHandler(data) {
      this.exBuffer.put(data);
    }
  }]);

  return DataEvent;
}(EventEmitter);

module.exports = DataEvent;