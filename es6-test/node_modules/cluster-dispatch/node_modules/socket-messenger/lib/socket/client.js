'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var assert = require('assert');
var net = require('net');
var is = require('is-type-of');
var SDKBase = require('sdk-base');
var debug = require('debug')('socket-msessenger:client');

var _require = require('../util'),
    encode = _require.encode;

var _require2 = require('../constant'),
    ACTION = _require2.ACTION;

var DataEvent = require('./data_event');

var BIND = Symbol('bind_handler');

var Client = function (_SDKBase) {
  _inherits(Client, _SDKBase);

  function Client(_ref) {
    var sockPath = _ref.sockPath,
        socket = _ref.socket,
        name = _ref.name;

    _classCallCheck(this, Client);

    var _this = _possibleConstructorReturn(this, (Client.__proto__ || Object.getPrototypeOf(Client)).call(this));

    assert(is.string(name) && name.length > 0, 'options.name required');

    if (is.undefined(socket) && is.string(sockPath)) {
      _this.socket = net.connect(sockPath);
    } else if (is.object(socket)) {
      _this.socket = socket;
    } else {
      // TODO: error message
      throw new Error();
    }

    _this.socket.name = name;
    _this.name = name;
    _this.hasReady = false;

    _this.init();
    return _this;
  }

  _createClass(Client, [{
    key: 'init',
    value: function init() {
      this.dataEvent = new DataEvent(this.socket, this.name);
      this[BIND]();

      this.register();
    }
  }, {
    key: BIND,
    value: function value() {
      var _this2 = this;

      this.dataEvent.on('dataComplete', function (data) {
        return _this2.dataCompleteHandler(data);
      });
    }
  }, {
    key: 'dataCompleteHandler',
    value: function dataCompleteHandler(completeData) {
      var decodeData = completeData;

      if (this.hasReady) {
        var mail = decodeData.mail;

        this.emit('mail', mail);
      } else {
        var ready = decodeData.ready;


        if (ready) {
          this.ready(true);
          this.hasReady = true;
        } else {
          this.emit('error', new Error(`${ this.name } register fail`));
        }
      }
    }
  }, {
    key: 'send',
    value: function send(mail) {
      var data = { action: ACTION.SEND_MAIL, payload: { mail } };
      this.socket.write(encode(JSON.stringify(data)));
    }
  }, {
    key: 'register',
    value: function register() {
      var data = { action: ACTION.REGISTER, payload: { name: this.name } };

      this.socket.write(encode(JSON.stringify(data)));
    }
  }, {
    key: 'close',
    value: function close() {
      this.socket.destroy();
    }
  }]);

  return Client;
}(SDKBase);

module.exports = Client;