'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var os = require('os');
var path = require('path');
var SDKBase = require('sdk-base');
var assert = require('assert');
var debug = require('debug')('socket-msessenger:messenger');

var Server = require('./socket/server');

var BIND = Symbol('bind_handler');

var Messenger = function (_SDKBase) {
  _inherits(Messenger, _SDKBase);

  function Messenger() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$sockPath = _ref.sockPath,
        sockPath = _ref$sockPath === undefined ? path.join(os.tmpdir(), 'midway.sock') : _ref$sockPath;

    _classCallCheck(this, Messenger);

    var _this = _possibleConstructorReturn(this, (Messenger.__proto__ || Object.getPrototypeOf(Messenger)).call(this));

    _this.server = new Server();
    _this.sockPath = sockPath;
    return _this;
  }

  _createClass(Messenger, [{
    key: 'init',
    value: regeneratorRuntime.mark(function init() {
      var server, sockPath;
      return regeneratorRuntime.wrap(function init$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              server = this.server, sockPath = this.sockPath;
              _context.next = 3;
              return server.listen(sockPath);

            case 3:

              this[BIND]();

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, init, this);
    })
  }, {
    key: BIND,
    value: function value() {
      var _this2 = this;

      this.server.on('mail', function (mail) {
        return _this2.onMailHandler(mail);
      });
    }
  }, {
    key: 'onMailHandler',
    value: function onMailHandler(mail) {
      // debug(mail);
      this.server.send(mail);
    }
  }, {
    key: 'close',
    value: function close() {
      this.server.close();
    }
  }]);

  return Messenger;
}(SDKBase);

module.exports = Messenger;