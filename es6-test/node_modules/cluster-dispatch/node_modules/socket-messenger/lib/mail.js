'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');
var is = require('is-type-of');
var debug = require('debug')('socket-msessenger:mail');

var Mail = function (_EventEmitter) {
  _inherits(Mail, _EventEmitter);

  function Mail() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        from = _ref.from,
        id = _ref.id,
        client = _ref.client,
        _ref$isReply = _ref.isReply,
        isReply = _ref$isReply === undefined ? false : _ref$isReply,
        timeout = _ref.timeout;

    _classCallCheck(this, Mail);

    var _this = _possibleConstructorReturn(this, (Mail.__proto__ || Object.getPrototypeOf(Mail)).call(this));

    _this.client = client;
    _this.timeout = timeout;

    _this.from = from;
    _this.id = id;
    _this.to = null;
    _this.message = null;
    _this.isReply = isReply;
    return _this;
  }

  _createClass(Mail, [{
    key: 'setTo',
    value: function setTo(to) {
      this.to = to;

      return this;
    }
  }, {
    key: 'setMessage',
    value: function setMessage(message) {
      this.message = message;

      return this;
    }
  }, {
    key: 'send',
    value: function send() {
      var _this2 = this;

      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$duplex = _ref2.duplex,
          duplex = _ref2$duplex === undefined ? true : _ref2$duplex;

      this.client.send(this.toJSON());

      if (!duplex || this.isReply) {
        return null;
      }

      return new Promise(function (resolve, reject) {
        var id = _this2.id;

        var timeoutFlag = setTimeout(function () {
          _this2.removeAllListeners();
          var error = new Error();
          error.name = 'socket timeout';
          error.message = _this2.toJSON();

          return reject(error);
        }, _this2.timeout);

        _this2.once(`reply#${ id }`, function (reply) {
          clearTimeout(timeoutFlag);
          return resolve(reply);
        });
      });
    }
  }, {
    key: 'reply',
    value: function reply(message) {
      var to = this.from,
          from = this.to,
          client = this.client,
          id = this.id;


      return new Mail({ from, client, id, isReply: true }).setTo(to).setMessage(message).send();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var id = this.id,
          to = this.to,
          from = this.from,
          message = this.message,
          isReply = this.isReply;


      return { id, to, from, message, isReply };
    }
  }], [{
    key: 'wrapMail',
    value: function wrapMail() {
      var mail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var client = arguments[1];
      var from = mail.from,
          id = mail.id,
          message = mail.message,
          to = mail.to,
          isReply = mail.isReply;


      return new Mail({ from, id, client, isReply }).setTo(to).setMessage(message);
    }
  }]);

  return Mail;
}(EventEmitter);

module.exports = Mail;